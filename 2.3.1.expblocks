{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"U`9aA+=)r+L1tzA.)-qi\">myVariable</variable><variable type=\"broadcast_msg\" id=\"iXi-IVLNyRT3)^`rXUkr\">message1</variable></variables><block type=\"exp_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"105\" y=\"159\"><next><block type=\"exp_sounds_play_sound\" id=\"W1u,3geZydlU6RWiYyUQ\"><field name=\"SOUND\">airWrench</field><next><block type=\"exp_drivetrain_set_drive_velocity\" id=\"a`}*JywW$cklR+s%]=;r\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"I4_Cvgwbpz][Hjbp{RtH\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"exp_drivetrain_set_turn_velocity\" id=\"%z;#X6PoX~Z:]d%C9_UR\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"E]!u~|s:50Gv5QSJp)WU\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"exp_events_broadcast_and_wait\" id=\"k_hTk%*wbT_t=OYJ-!c]\"><field name=\"BROADCAST_OPTION\" id=\"iXi-IVLNyRT3)^`rXUkr\" variabletype=\"broadcast_msg\">message1</field><next><block type=\"exp_drivetrain_turn_for\" id=\"zo0oiy1QjK@lN,5lOO,H\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"uL/kzOeEVg7|ThQLIp)J\"><field name=\"NUM\">458</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block><block type=\"exp_events_when_broadcasted\" id=\"+/#HdjIA0dnui+4aC0%4\" x=\"130\" y=\"590\"><field name=\"BROADCAST_OPTION\" id=\"iXi-IVLNyRT3)^`rXUkr\" variabletype=\"broadcast_msg\">message1</field><next><block type=\"exp_drivetrain_drive_for\" id=\"8(g]Uk8/=U^bz^vr!gEL\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"{$U(-}:^wAhh#ZE!*ZF+\"><field name=\"NUM\">200</field></shadow></value></block></next></block></xml>","rconfig":[{"port":[4],"name":"Vision4","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":39,\"signatures\":[{\"name\":\"C_YELLOW\",\"parameters\":{\"uMin\":1183,\"uMax\":2109,\"uMean\":1646,\"vMin\":-4335,\"vMax\":-3551,\"vMean\":-3943,\"rgb\":11573862.868852459,\"type\":0,\"name\":\"C_YELLOW\"},\"range\":3},{\"name\":\"C_BLUE\",\"parameters\":{\"uMin\":-3413,\"uMax\":-2897,\"uMean\":-3156,\"vMin\":7201,\"vMax\":8137,\"vMean\":7670,\"rgb\":1450301,\"type\":1,\"name\":\"C_BLUE\"},\"range\":3.7},{\"name\":\"C_RED\",\"parameters\":{\"uMin\":8381,\"uMax\":8995,\"uMean\":8688,\"vMin\":-1311,\"vMax\":-845,\"vMean\":-1078,\"rgb\":6237737,\"type\":1,\"name\":\"C_RED\"},\"range\":6.8},{\"name\":\"C_GREEN\",\"parameters\":{\"uMin\":-6335,\"uMax\":-4255,\"uMean\":-5294,\"vMin\":-3967,\"vMax\":-2495,\"vMean\":-3230,\"rgb\":3428671,\"type\":1,\"name\":\"C_GREEN\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[{\"name\":\"CRASH\",\"code\":\"C_RED, C_BLUE, C_GREEN\"}]}}","isConfigured":"false"}},{"port":[1,5,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel275in","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}}],"slot":0,"platform":"EXP","sdkVersion":"20240219.10.00.00","appVersion":"3.1.1","minVersion":"3.1.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START EXP MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END EXP MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\n/*vex-vision-config:begin*/\nvision::signature Vision4__C_YELLOW = vision::signature (1, 1183, 2109, 1646,-4335, -3551, -3943,3, 0);\nvision::signature Vision4__C_BLUE = vision::signature (2, -3413, -2897, -3156,7201, 8137, 7670,3.7, 1);\nvision::signature Vision4__C_RED = vision::signature (3, 8381, 8995, 8688,-1311, -845, -1078,6.8, 1);\nvision::signature Vision4__C_GREEN = vision::signature (4, -6335, -4255, -5294,-3967, -2495, -3230,2.5, 1);\nvision::code Vision4__CRASH = vision::code (Vision4__C_RED, Vision4__C_BLUE, Vision4__C_GREEN);\nvision Vision4 = vision (PORT4, 39, Vision4__C_YELLOW, Vision4__C_BLUE, Vision4__C_RED, Vision4__C_GREEN);\n/*vex-vision-config:end*/\nmotor LeftDriveSmart = motor(PORT1, false);\nmotor RightDriveSmart = motor(PORT5, true);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 219.44, 320, 40, mm, 1);\n\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Generated code.\n\n// Include the EXP Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\nevent message1 = event();\n\n// \"when started\" hat block\nint whenStarted1() {\n  Brain.playSound(wrench);\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.setTurnVelocity(100.0, percent);\n  message1.broadcastAndWait();\n  Drivetrain.turnFor(right, 458.0, degrees, true);\n  return 0;\n}\n\n// \"when I receive message1\" hat block\nvoid onevent_message1_0() {\n  Drivetrain.driveFor(forward, 200.0, mm, true);\n}\n\n\nint main() {\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  // register event handlers\n  message1(onevent_message1_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // Wait for ADI sensors to initialize\n  wait(100, msec);\n\n\n  whenStarted1();\n}","target":"Physical"}